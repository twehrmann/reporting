result="data.frame",
variable="string"
)
)
setClass(Class="ResultSet",
representation(
result="data.frame",
variable="str"
)
)
type(v)
help(v)
typeof(v)
setClass(Class="ResultSet",
representation(
result="data.frame",
variable="character"
)
)
calcFE <- function(fe_variable_gui, lcc_type_gui) {
print("GUI setting")
print(fe_variable_gui)
print(lcc_type_gui)
BaseT1 <- BaseT1_orig
if (lcc_type_gui == "BUR") {
EstratoCong <- EstratoCong_BUR
EstratosIPCC <- Estratos_BUR_IPCC
AreasEstratos <- AreasEstratos_BUR
ESTRATO_KEY = "clave_pmn4"
} else if (lcc_type_gui == "MADMEX") {
EstratoCong <- EstratoCong_MADMEX
EstratosIPCC <- Estratos_MADMEX_IPCC
AreasEstratos <- AreasEstratos_MADMEX
ESTRATO_KEY = "clave_madmex00"
}
#Se crea una variable de "Conglomerado - Sitio" en las bases "BaseT1" y "EstratoCong"
BaseT1$CongSitio<-paste(BaseT1$folio,"-",BaseT1$sitio)
EstratoCong$CongSitio<-paste(EstratoCong$numnal,"-",EstratoCong$sitio)
#Se identifica el tipo de estrato PMN por conglomerado
BaseT1<- merge(BaseT1, EstratoCong, by.x = "CongSitio", by.y = "CongSitio",all=TRUE)
#Se identifica el tipo de estrato IPCC por conglomerado
BaseT1<- merge(BaseT1, EstratosIPCC, by.x = ESTRATO_KEY, by.y = "pf_redd_clave_subcat_leno_pri_sec",all=TRUE)
###############################################################################
####Se filtran los estratos que no pertenencen a las categor?as de "Tierras"###
######################## Forestales" o "Praderas" del IPCC#####################
BaseT1=BaseT1[BaseT1$pf_redd_ipcc_2003=="Tierras Forestales" | BaseT1$pf_redd_ipcc_2003=="Praderas",]
length(BaseT1$folio)
#se filtra todas las USM cuya "tipificaci?n" es "Inicial", "Reemplazo" o "Monitoreo"
BaseT1=BaseT1[BaseT1$tipificacion=="Inicial" |
BaseT1$tipificacion=="Reemplazo" |
BaseT1$tipificacion=="Monitoreo",]
length(BaseT1$folio)
# carbono_arboles
# carbono_tocones
# carbono_muertospie
# total_carbono
# biomasa_arboles
# biomasa_tocones
# biomasa_muertospie
# total_biomasa
# carbono_raices_por_sitio
# biomasa_raices_por_sitio
fe_variable=0
if (fe_variable_gui == "carbono_arboles") {
print ("Using carbono_arboles")
FE_VAR = "carbono_arboles"
} else if (fe_variable_gui == "carbono_tocones") {
FE_VAR = "carbono_tocones"
print ("Using carbono_tocones")
} else if (fe_variable_gui == "carbono_muertospie") {
FE_VAR = "carbono_muertospie"
print ("Using carbono_muertospie")
}
fe_variable=BaseT1[,FE_VAR]
#Se imputan los 0 en los conglomerdos reportados "Monitoreo" y que ten?an "Pradera"
BaseT1$FEvar<-ifelse(BaseT1$tipificacion=="Monitoreo" & BaseT1$pf_redd_ipcc_2003=="Praderas",0,
as.numeric(as.character(fe_variable)))
#Se filtran todos los "NA" de la variable "CarbAerViv"
BaseT1<-BaseT1[!(is.na(BaseT1$FEvar)),]
#*****************************************************************************#
#A)CARBONO DE ?RBOLES##########################################################
###############################################################################
#####Se crean variables auxiliares para obtener el estimador de Razon por ha###
yi<-BaseT1$FEvar
###Note que los ?rboles mayores a 7.5 cm s?lo se midieron en parcelas###
#####de 400m2, por lo que el ?rea de cada uno de estos sitios es de 0.04has####
ai <- rep(0.04,length(yi))
#Estrato
Estrato<-BaseT1[,ESTRATO_KEY]
AreasEstratos<-data.frame(Estrato=AreasEstratos$cves,AreaHa=AreasEstratos$cves4_pmn)
#Conglomerado
Conglomerado<-BaseT1$folio
resultados<-ER(yi=yi,ai=ai,Estrato=Estrato,Conglomerado=Conglomerado,AreasEstratos=AreasEstratos)
return(new("ResultSet",
result=resultados,
variable=FE_VAR))
}
data=calcFE("carbono_arboles","BUR")
data$result
data$variable
data.entry
data@variable
data@result
library(Carbono5)
library(RPostgreSQL)
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
## Open a connection
con <- dbConnect(drv, dbname="reporting", host="reddbase.conabio.gob.mx", user="postgres", password="postgres.")
AreasEstratos_BUR = dbGetQuery(con, "select cves,cves2_pmn,cves3_pmn,cves4_pmn from r_carbono5.areas_estratos_pmn")
AreasEstratos_MADMEX = dbGetQuery(con, "select cves,cves2_pmn,cves3_pmn,cves4_pmn from r_carbono5.areas_estratos_madmex")
BaseT1_orig = dbGetQuery(con, "select * from r_carbono5.calculo_20140421_v19_t1")
EstratoCong_BUR= dbGetQuery(con, "select * from r_carbono5.estrato_cong_pmn_gus_serie4_2")
EstratoCong_MADMEX= dbGetQuery(con, "select * from  r_carbono5.estrato_cong_pmn_madmex_gus_serie4_2_a")
Estratos_BUR_IPCC= dbGetQuery(con, "select * from r_carbono5.estratos_pmn_ipcc")
Estratos_MADMEX_IPCC= dbGetQuery(con, "select * from r_carbono5.estratos_madmex_ipcc")
## Closes the connection
dbDisconnect(con)
## Frees all the resources on the driver
dbUnloadDriver(drv)
fe_variable_gui="carbono_arboles"
lcc_type_gui="MADMEX"
setClass(Class="ResultSet",
representation(
result="data.frame",
variable="character"
)
)
calcFE <- function(fe_variable_gui, lcc_type_gui) {
print("GUI setting")
print(fe_variable_gui)
print(lcc_type_gui)
BaseT1 <- BaseT1_orig
if (lcc_type_gui == "BUR") {
EstratoCong <- EstratoCong_BUR
EstratosIPCC <- Estratos_BUR_IPCC
AreasEstratos <- AreasEstratos_BUR
ESTRATO_KEY = "clave_pmn4"
} else if (lcc_type_gui == "MADMEX") {
EstratoCong <- EstratoCong_MADMEX
EstratosIPCC <- Estratos_MADMEX_IPCC
AreasEstratos <- AreasEstratos_MADMEX
ESTRATO_KEY = "clave_madmex00"
}
#Se crea una variable de "Conglomerado - Sitio" en las bases "BaseT1" y "EstratoCong"
BaseT1$CongSitio<-paste(BaseT1$folio,"-",BaseT1$sitio)
EstratoCong$CongSitio<-paste(EstratoCong$numnal,"-",EstratoCong$sitio)
#Se identifica el tipo de estrato PMN por conglomerado
BaseT1<- merge(BaseT1, EstratoCong, by.x = "CongSitio", by.y = "CongSitio",all=TRUE)
#Se identifica el tipo de estrato IPCC por conglomerado
BaseT1<- merge(BaseT1, EstratosIPCC, by.x = ESTRATO_KEY, by.y = "pf_redd_clave_subcat_leno_pri_sec",all=TRUE)
###############################################################################
####Se filtran los estratos que no pertenencen a las categor?as de "Tierras"###
######################## Forestales" o "Praderas" del IPCC#####################
BaseT1=BaseT1[BaseT1$pf_redd_ipcc_2003=="Tierras Forestales" | BaseT1$pf_redd_ipcc_2003=="Praderas",]
length(BaseT1$folio)
#se filtra todas las USM cuya "tipificaci?n" es "Inicial", "Reemplazo" o "Monitoreo"
BaseT1=BaseT1[BaseT1$tipificacion=="Inicial" |
BaseT1$tipificacion=="Reemplazo" |
BaseT1$tipificacion=="Monitoreo",]
length(BaseT1$folio)
# carbono_arboles
# carbono_tocones
# carbono_muertospie
# total_carbono
# biomasa_arboles
# biomasa_tocones
# biomasa_muertospie
# total_biomasa
# carbono_raices_por_sitio
# biomasa_raices_por_sitio
fe_variable=0
if (fe_variable_gui == "carbono_arboles") {
print ("Using carbono_arboles")
FE_VAR = "carbono_arboles"
} else if (fe_variable_gui == "carbono_tocones") {
FE_VAR = "carbono_tocones"
print ("Using carbono_tocones")
} else if (fe_variable_gui == "carbono_muertospie") {
FE_VAR = "carbono_muertospie"
print ("Using carbono_muertospie")
}
fe_variable=BaseT1[,FE_VAR]
#Se imputan los 0 en los conglomerdos reportados "Monitoreo" y que ten?an "Pradera"
BaseT1$FEvar<-ifelse(BaseT1$tipificacion=="Monitoreo" & BaseT1$pf_redd_ipcc_2003=="Praderas",0,
as.numeric(as.character(fe_variable)))
#Se filtran todos los "NA" de la variable "CarbAerViv"
BaseT1<-BaseT1[!(is.na(BaseT1$FEvar)),]
#*****************************************************************************#
#A)CARBONO DE ?RBOLES##########################################################
###############################################################################
#####Se crean variables auxiliares para obtener el estimador de Razon por ha###
yi<-BaseT1$FEvar
###Note que los ?rboles mayores a 7.5 cm s?lo se midieron en parcelas###
#####de 400m2, por lo que el ?rea de cada uno de estos sitios es de 0.04has####
ai <- rep(0.04,length(yi))
#Estrato
Estrato<-BaseT1[,ESTRATO_KEY]
AreasEstratos<-data.frame(Estrato=AreasEstratos$cves,AreaHa=AreasEstratos$cves4_pmn)
#Conglomerado
Conglomerado<-BaseT1$folio
resultados<-ER(yi=yi,ai=ai,Estrato=Estrato,Conglomerado=Conglomerado,AreasEstratos=AreasEstratos)
return(new("ResultSet",
result=resultados,
variable=FE_VAR))
}
DB_SCHEME = "client_output"
print ("BUR")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
## Open a connection
con <- dbConnect(drv, dbname="reporting", host="reddbase.conabio.gob.mx", user="postgres", password="postgres.")
db_table_name = c(DB_SCHEME,"FE_pot_carbono_arboles_bur")
data=calcFE("carbono_arboles","BUR")
if (dbExistsTable(con,db_table_name)) {
dbRemoveTable(con,db_table_name)
}
dbWriteTable(con,db_table_name,data@result)
data=0
print("MADMEX")
db_table_name = c(DB_SCHEME,"FE_pot_carbono_arboles_madmex")
data=calcFE("carbono_arboles","MADMEX")
print(data)
if (dbExistsTable(con,db_table_name)) {
dbRemoveTable(con,db_table_name)
}
dbWriteTable(con,db_table_name,data@result)
## Closes the connection
dbDisconnect(con)
## Frees all the resources on the driver
dbUnloadDriver(drv)
setwd("/Volumes/SSD2go_tw/conafor/R Client/cliente_pot_carbon")
if(!exists("foo", mode="function")) source("util.py")
if(!exists("foo", mode="function")) source("calc_pot_carbono_db.R")
library(Carbono5)
setwd("/Volumes/SSD2go_tw/conafor/R Client/cliente_pot_carbon")
if(!exists("foo", mode="function")) source("db_access")
if(!exists("foo", mode="function")) source("db_access.R")
if(!exists("foo", mode="function")) source("db_access.R")
source("tools.R")
source("tools.R")
source
source("db_access.R")
source("db_access.R")
library(RPostgreSQL)
setClass(Class="InputStructure",
representation(
AreasEstratos_BUR="data.frame",
AreasEstratos_MADMEX="data.frame",
BaseT1_orig="data.frame",
ESTRATOCong_BUR="data.frame",
ESTRATOCong_MADMEX="data.frame",
ESTRATOS_BUR_IPCC="data.frame",
Estratos_MADMEX_IPCC="data.frame"
)
)
getBaseData <- function() {
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
## Open a connection
con <- dbConnect(drv, dbname="reporting", host="reddbase.conabio.gob.mx", user="postgres", password="postgres.")
AreasEstratos_BUR = dbGetQuery(con, "select cves,cves2_pmn,cves3_pmn,cves4_pmn from r_carbono5.areas_estratos_pmn")
AreasEstratos_MADMEX = dbGetQuery(con, "select cves,cves2_pmn,cves3_pmn,cves4_pmn from r_carbono5.areas_estratos_madmex")
BaseT1_orig = dbGetQuery(con, "select * from r_carbono5.calculo_20140421_v19_t1")
EstratoCong_BUR= dbGetQuery(con, "select * from r_carbono5.estrato_cong_pmn_gus_serie4_2")
EstratoCong_MADMEX= dbGetQuery(con, "select * from  r_carbono5.estrato_cong_pmn_madmex_gus_serie4_2_a")
Estratos_BUR_IPCC= dbGetQuery(con, "select * from r_carbono5.estratos_pmn_ipcc")
Estratos_MADMEX_IPCC= dbGetQuery(con, "select * from r_carbono5.estratos_madmex_ipcc")
## Closes the connection
dbDisconnect(con)
## Frees all the resources on the driver
dbUnloadDriver(drv)
return(new("InputStructure",
AreasEstratos_BUR=AreasEstratos_BUR,
AreasEstratos_MADMEX=AreasEstratos_MADMEX,
BaseT1_orig=BaseT1_orig,
ESTRATOCong_BUR=EstratoCong_BUR,
ESTRATOCong_MADMEX=EstratoCong_MADMEX,
ESTRATOS_BUR_IPCC=Estratos_BUR_IPCC,
Estratos_MADMEX_IPCC=Estratos_MADMEX_IPCC
}
storeResults <- function(table_name, data) {
## Open a connection
con <- dbConnect(drv, dbname="reporting", host="reddbase.conabio.gob.mx", user="postgres", password="postgres.")
db_table_name = c(DB_SCHEME,"FE_pot_carbono_arboles_bur")
data=calcFE("carbono_arboles","BUR")
if (dbExistsTable(con,db_table_name)) {
dbRemoveTable(con,db_table_name)
}
dbWriteTable(con,db_table_name,data@result)
data=0
print("MADMEX")
db_table_name = c(DB_SCHEME,"FE_pot_carbono_arboles_madmex")
data=calcFE("carbono_arboles","MADMEX")
print(data)
if (dbExistsTable(con,db_table_name)) {
dbRemoveTable(con,db_table_name)
}
dbWriteTable(con,db_table_name,data@result)
## Closes the connection
dbDisconnect(con)
## Frees all the resources on the driver
dbUnloadDriver(drv)
return(True)
}
source("db_access.R")
source("db_access.R")
source("db_access.R")
source("calc_FE.R")
inputData = getBaseData()
library(Carbono5)
calcFE <- function(fe_variable_gui, lcc_type_gui, inputData) {
print("GUI setting")
print(fe_variable_gui)
print(lcc_type_gui)
BaseT1 <- inputData@BaseT1_orig
if (lcc_type_gui == "BUR") {
EstratoCong <- inputData@EstratoCong_BUR
EstratosIPCC <- inputData@Estratos_BUR_IPCC
AreasEstratos <- inputData@AreasEstratos_BUR
ESTRATO_KEY = "clave_pmn4"
} else if (lcc_type_gui == "MADMEX") {
EstratoCong <- inputData@EstratoCong_MADMEX
EstratosIPCC <- inputData@Estratos_MADMEX_IPCC
AreasEstratos <- inputData@AreasEstratos_MADMEX
ESTRATO_KEY = "clave_madmex00"
}
#Se crea una variable de "Conglomerado - Sitio" en las bases "BaseT1" y "EstratoCong"
BaseT1$CongSitio<-paste(BaseT1$folio,"-",BaseT1$sitio)
EstratoCong$CongSitio<-paste(EstratoCong$numnal,"-",EstratoCong$sitio)
#Se identifica el tipo de estrato PMN por conglomerado
BaseT1<- merge(BaseT1, EstratoCong, by.x = "CongSitio", by.y = "CongSitio",all=TRUE)
#Se identifica el tipo de estrato IPCC por conglomerado
BaseT1<- merge(BaseT1, EstratosIPCC, by.x = ESTRATO_KEY, by.y = "pf_redd_clave_subcat_leno_pri_sec",all=TRUE)
###############################################################################
####Se filtran los estratos que no pertenencen a las categor?as de "Tierras"###
######################## Forestales" o "Praderas" del IPCC#####################
BaseT1=BaseT1[BaseT1$pf_redd_ipcc_2003=="Tierras Forestales" | BaseT1$pf_redd_ipcc_2003=="Praderas",]
length(BaseT1$folio)
#se filtra todas las USM cuya "tipificaci?n" es "Inicial", "Reemplazo" o "Monitoreo"
BaseT1=BaseT1[BaseT1$tipificacion=="Inicial" |
BaseT1$tipificacion=="Reemplazo" |
BaseT1$tipificacion=="Monitoreo",]
length(BaseT1$folio)
# carbono_arboles
# carbono_tocones
# carbono_muertospie
# total_carbono
# biomasa_arboles
# biomasa_tocones
# biomasa_muertospie
# total_biomasa
# carbono_raices_por_sitio
# biomasa_raices_por_sitio
fe_variable=0
if (fe_variable_gui == "carbono_arboles") {
print ("Using carbono_arboles")
FE_VAR = "carbono_arboles"
} else if (fe_variable_gui == "carbono_tocones") {
FE_VAR = "carbono_tocones"
print ("Using carbono_tocones")
} else if (fe_variable_gui == "carbono_muertospie") {
FE_VAR = "carbono_muertospie"
print ("Using carbono_muertospie")
}
fe_variable=BaseT1[,FE_VAR]
#Se imputan los 0 en los conglomerdos reportados "Monitoreo" y que ten?an "Pradera"
BaseT1$FEvar<-ifelse(BaseT1$tipificacion=="Monitoreo" & BaseT1$pf_redd_ipcc_2003=="Praderas",0,
as.numeric(as.character(fe_variable)))
#Se filtran todos los "NA" de la variable "CarbAerViv"
BaseT1<-BaseT1[!(is.na(BaseT1$FEvar)),]
#*****************************************************************************#
#A)CARBONO DE ?RBOLES##########################################################
###############################################################################
#####Se crean variables auxiliares para obtener el estimador de Razon por ha###
yi<-BaseT1$FEvar
###Note que los ?rboles mayores a 7.5 cm s?lo se midieron en parcelas###
#####de 400m2, por lo que el ?rea de cada uno de estos sitios es de 0.04has####
ai <- rep(0.04,length(yi))
#Estrato
Estrato<-BaseT1[,ESTRATO_KEY]
AreasEstratos<-data.frame(Estrato=AreasEstratos$cves,AreaHa=AreasEstratos$cves4_pmn)
#Conglomerado
Conglomerado<-BaseT1$folio
resultados<-ER(yi=yi,ai=ai,Estrato=Estrato,Conglomerado=Conglomerado,AreasEstratos=AreasEstratos)
return(new("ResultSet",
result=resultados,
variable=FE_VAR))
}
fe_variable_gui="carbono_arboles"
lcc_type_gui="MADMEX"
data=calcFE("carbono_arboles","BUR")
data=calcFE("carbono_arboles","BUR", inputData)
source("calc_FE.R")
data=calcFE("carbono_arboles","BUR", inputData)
setwd("/Volumes/SSD2go_tw/conafor/R Client/cliente_pot_carbon")
source("tools.R")
source("db_access.R")
source("calc_FE.R")
inputData = getBaseData()
fe_variable_gui="carbono_arboles"
lcc_type_gui="MADMEX"
data=calcFE("carbono_arboles","BUR", inputData)
inputData = getBaseData()
source("db_access.R")
inputData = getBaseData()
data=calcFE("carbono_arboles","BUR", inputData)
setwd("/Volumes/SSD2go_tw/conafor/R Client/cliente_pot_carbon")
source("tools.R")
source("db_access.R")
source("calc_FE.R")
inputData = getBaseData()
inputData@EstratoCong_BUR
EstratoCong <- inputData@EstratoCong_BUR
EstratoCong <- inputData@EstratoCong_BUR
inputData@EstratoCong_BUR
EstratoCong <- inputData@EstratoCong_BUR
EstratosIPCC <- inputData@Estratos_BUR_IPCC
AreasEstratos <- inputData@AreasEstratos_BUR
ESTRATO_KEY = "clave_pmn4"
BaseT1$CongSitio<-paste(BaseT1$folio,"-",BaseT1$sitio)
BaseT1 <- inputData@BaseT1_orig
BaseT1$CongSitio<-paste(BaseT1$folio,"-",BaseT1$sitio)
EstratoCong$CongSitio<-paste(EstratoCong$numnal,"-",EstratoCong$sitio)
#Se identifica el tipo de estrato PMN por conglomerado
BaseT1<- merge(BaseT1, EstratoCong, by.x = "CongSitio", by.y = "CongSitio",all=TRUE)
#Se identifica el tipo de estrato IPCC por conglomerado
BaseT1<- merge(BaseT1, EstratosIPCC, by.x = ESTRATO_KEY, by.y = "pf_redd_clave_subcat_leno_pri_sec",all=TRUE)
###############################################################################
####Se filtran los estratos que no pertenencen a las categor?as de "Tierras"###
######################## Forestales" o "Praderas" del IPCC#####################
BaseT1=BaseT1[BaseT1$pf_redd_ipcc_2003=="Tierras Forestales" | BaseT1$pf_redd_ipcc_2003=="Praderas",]
length(BaseT1$folio)
#se filtra todas las USM cuya "tipificaci?n" es "Inicial", "Reemplazo" o "Monitoreo"
BaseT1=BaseT1[BaseT1$tipificacion=="Inicial" |
BaseT1$tipificacion=="Reemplazo" |
BaseT1$tipificacion=="Monitoreo",]
length(BaseT1$folio)
# carbono_arboles
# carbono_tocones
# carbono_muertospie
# total_carbono
# biomasa_arboles
# biomasa_tocones
# biomasa_muertospie
# total_biomasa
# carbono_raices_por_sitio
# biomasa_raices_por_sitio
fe_variable=0
if (fe_variable_gui == "carbono_arboles") {
print ("Using carbono_arboles")
FE_VAR = "carbono_arboles"
} else if (fe_variable_gui == "carbono_tocones") {
FE_VAR = "carbono_tocones"
print ("Using carbono_tocones")
} else if (fe_variable_gui == "carbono_muertospie") {
FE_VAR = "carbono_muertospie"
print ("Using carbono_muertospie")
}
fe_variable=BaseT1[,FE_VAR]
#Se imputan los 0 en los conglomerdos reportados "Monitoreo" y que ten?an "Pradera"
BaseT1$FEvar<-ifelse(BaseT1$tipificacion=="Monitoreo" & BaseT1$pf_redd_ipcc_2003=="Praderas",0,
as.numeric(as.character(fe_variable)))
#Se filtran todos los "NA" de la variable "CarbAerViv"
BaseT1<-BaseT1[!(is.na(BaseT1$FEvar)),]
#*****************************************************************************#
#A)CARBONO DE ?RBOLES##########################################################
###############################################################################
#####Se crean variables auxiliares para obtener el estimador de Razon por ha###
yi<-BaseT1$FEvar
###Note que los ?rboles mayores a 7.5 cm s?lo se midieron en parcelas###
#####de 400m2, por lo que el ?rea de cada uno de estos sitios es de 0.04has####
ai <- rep(0.04,length(yi))
#Estrato
Estrato<-BaseT1[,ESTRATO_KEY]
AreasEstratos<-data.frame(Estrato=AreasEstratos$cves,AreaHa=AreasEstratos$cves4_pmn)
#Conglomerado
Conglomerado<-BaseT1$folio
resultados<-ER(yi=yi,ai=ai,Estrato=Estrato,Conglomerado=Conglomerado,AreasEstratos=AreasEstratos)
data=calcFE("carbono_arboles","BUR", inputData)
setwd("/Volumes/SSD2go_tw/conafor/R Client/cliente_pot_carbon")
source("tools.R")
source("db_access.R")
source("calc_FE.R")
inputData = getBaseData()
fe_variable_gui="carbono_arboles"
lcc_type_gui="MADMEX"
DB_SCHEME = "client_output"
print ("BUR")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
## Open a connection
con <- dbConnect(drv, dbname="reporting", host="reddbase.conabio.gob.mx", user="postgres", password="postgres.")
db_table_name = c(DB_SCHEME,"FE_pot_carbono_arboles_bur")
data=calcFE("carbono_arboles","BUR", inputData)
if (dbExistsTable(con,db_table_name)) {
dbRemoveTable(con,db_table_name)
}
dbWriteTable(con,db_table_name,data@result)
data=0
print("MADMEX")
db_table_name = c(DB_SCHEME,"FE_pot_carbono_arboles_madmex")
data=calcFE("carbono_arboles","MADMEX", inputData)
print(data)
if (dbExistsTable(con,db_table_name)) {
dbRemoveTable(con,db_table_name)
}
dbWriteTable(con,db_table_name,data@result)
## Closes the connection
dbDisconnect(con)
## Frees all the resources on the driver
dbUnloadDriver(drv)
